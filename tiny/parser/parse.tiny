%%
Tiny       -> PROGRAM Name ':' Dclns Body Name '.' 	      => "program";

Dclns      -> VAR (Dcln ';')*				                      => "dclns"
           -> 					                                  => "dclns";

Dcln       -> Name list ',' ':' Type			                => "dcln";

Type       -> INTEGER 		             		                => "integer"
           -> BOOLEAN				     	                        => "boolean";

Body       -> BEGINX Statement list ';' END             	=> "block";

Statement  -> Name ASSIGNMENT Expression                	=> "assign"
           -> OUTPUT '(' Expression ')'                  	=> "output"
           -> OUTPUT '(' Expression list ',' ')'          => "output"
           -> IF Expression THEN Statement
                            (ELSE Statement)?            	=> "if"
           -> WHILE Expression DO Statement      	        => "while"
           -> Body
	         ->                                           	=> "<null>";

Expression -> Term	                         		
	         -> Term LTE Term	                         			=> "<="
           -> Term GTE Term                               => ">="
           -> Term LT Term                                => "<"
           -> Term GT Term                                => ">"
           -> Term EQ Term                                => "="
           -> Term NEQ Term                               => "<>";

Term       -> Factor
	         -> Term '+' Factor				                     => "+"
           -> Term '-' Factor                            => "-"
           -> Term OR Factor                             => "or";

Factor     -> Primary
           -> Factor '*' Primary                         => "*"
           -> Factor '/' Primary                         => "/"
           -> Factor AND Primary                         => "and"
           -> Factor MOD Primary                         => "mod";


Primary    -> '-' Primary                            	    => "-"
           -> '+' Primary                                 => "+"
           -> NOT Primary                                 => "not"
           -> MorePrimary;

MorePrimary -> SuperPrimary EXP MorePrimary              => "**"
            -> SuperPrimary;        
    
            
SuperPrimary -> READ                                      => "read"
             -> Name
             -> INTEGER_NUM                               => "<integer>"
             -> BOOLEAN_TRUE                              => "<boolean>"
             -> BOOLEAN_FALSE                              => "<booleanf>"
             -> '(' Expression ')';

Name        -> IDENTIFIER				                          => "<identifier>";
